/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2023-08-23 00:38:48.124543
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.508211297439247)*x7);
x11=((0.721788702560753)*x6);
x12=((0.60565763679276)*x7);
x13=((0.60565763679276)*x5);
x14=((1.0)*x0);
x15=((0.642790725366564)*x5);
x16=((2.1809)*x7);
x17=((0.642790725366564)*x6);
x18=((1.8954)*x0);
x19=((0.60565763679276)*x6);
x20=((0.766041828742221)*x5);
x21=((2.9959)*x1);
x22=((1.0)*x7);
x23=((0.508211297439247)*x0);
x24=((0.721788702560753)*x5);
x25=((1.8954)*x7);
x26=((2.1809)*x0);
x27=((0.60565763679276)*x0);
x28=((0.766041828742221)*x6);
x29=((4.7878)*x2);
x30=(x1*x4);
x31=(x1*x3);
x32=(x2*x4);
x33=(x2*x3);
x34=((0.508211297439247)*x31);
x35=(x14*x31);
x36=(x22*x31);
x37=((((-1.0)*x32))+x31);
x38=((((1.0)*x30))+(((1.0)*x33)));
x39=((-1.0)*x38);
x40=(x37*x6);
x41=((((-1.0)*x35))+((x0*x32)));
x42=((((-1.0)*x36))+((x32*x7)));
x43=(x38*x5);
x44=((((-1.0)*x14*x32))+x35);
x45=((((-1.0)*x22*x32))+x36);
x46=(x14*(((((-1.0)*x33))+(((-1.0)*x30)))));
x47=(x22*(((((-1.0)*x33))+(((-1.0)*x30)))));
IkReal x48=((1.0)*x31);
IkReal x49=((1.0)*x27);
IkReal x50=((1.0)*x46);
eetrans[0]=((0.10787)+(((-1.0)*x13*x50))+((x0*x21))+((x0*x29))+((x6*((((x27*x32))+(((-1.0)*x27*x48))))))+((x26*x30))+((x26*x33))+(((-1.0)*x18*x48))+((x18*x32))+(((0.22767)*x0))+((x5*(((((-1.0)*x30*x49))+(((-1.0)*x33*x49))))))+((x5*((((x23*x32))+(((-1.0)*x23*x48))))))+(((-1.0)*x19*x41))+((x6*((((x23*x30))+((x23*x33))))))+(((-1.0)*x11*x50))+(((-1.0)*x24*x44))+(((0.052776)*x7)));
IkReal x51=((1.0)*x12);
IkReal x52=((1.0)*x47);
IkReal x53=((1.0)*x31);
eetrans[1]=((-0.034301)+((x29*x7))+(((-0.052776)*x0))+(((-1.0)*x13*x52))+(((-1.0)*x25*x53))+((x21*x7))+((x16*x33))+((x16*x30))+((x6*((((x10*x30))+((x10*x33))))))+(((0.22767)*x7))+(((-1.0)*x19*x42))+(((-1.0)*x11*x52))+(((-1.0)*x24*x45))+((x5*(((((-1.0)*x33*x51))+(((-1.0)*x30*x51))))))+((x5*((((x10*x32))+(((-1.0)*x10*x53))))))+((x6*(((((-1.0)*x31*x51))+((x12*x32))))))+((x25*x32)));
IkReal x54=((1.0)*x37);
eetrans[2]=((1.95729)+(((2.9959)*x2))+(((-1.0)*x13*x54))+((x6*(((((-0.60565763679276)*x30))+(((-0.60565763679276)*x33))))))+(((-4.7878)*x1))+((x5*(((((-0.60565763679276)*x32))+(((0.60565763679276)*x31))))))+(((-1.8954)*x33))+(((-1.8954)*x30))+(((-1.0)*x11*x54))+(((-1.0)*x19*x39))+(((-1.0)*x24*x38))+(((-2.1809)*x31))+((x5*(((((-0.508211297439247)*x30))+(((-0.508211297439247)*x33))))))+(((2.1809)*x32))+((x6*(((((-1.0)*x34))+(((0.508211297439247)*x32)))))));
eerot[0]=(((x7*x9))+((x8*(((((-1.0)*x15*x44))+((x20*x46))+((x28*x41))+(((-1.0)*x17*x46)))))));
eerot[1]=((((-1.0)*x14*x9))+((x8*(((((-1.0)*x15*x45))+((x20*x47))+((x28*x42))+(((-1.0)*x17*x47)))))));
eerot[2]=(x8*((((x20*x37))+((x28*x39))+(((-1.0)*x17*x37))+(((-1.0)*x15*x38)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((-0.10787)+px);
new_r01=r01;
new_py=((0.034301)+py);
new_r02=r02;
new_pz=((-1.95729)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2, j3, j4]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x57 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x57.valid){
continue;
}
IkReal x55=((1.0)*(x57.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x58=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x58.valid){
continue;
}
if( (((0.052776)*(x58.value))) < -1-IKFAST_SINCOS_THRESH || (((0.052776)*(x58.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x56=IKasin(((0.052776)*(x58.value)));
j0array[0]=(x56+(((-1.0)*x55)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x55))+(((-1.0)*x56)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x59=pz*pz;
IkReal x60=px*px;
IkReal x61=py*py;
IkReal x62=(cj0*r00);
IkReal x63=((28.8064557623251)*pz);
IkReal x64=(cj0*r01);
IkReal x65=(r01*sj0);
IkReal x66=(py*r00);
IkReal x67=((4.0)*px);
IkReal x68=(py*r01);
IkReal x69=((0.422208)*pz);
IkReal x70=(pz*r02);
IkReal x71=(px*r00);
IkReal x72=((8.0)*px);
IkReal x73=(cj0*r02);
IkReal x74=(r00*sj0);
IkReal x75=((26.9850957623251)*pz);
IkReal x76=((0.211104)*pz);
IkReal x77=((9.49594423767486)*pz);
IkReal x78=((8.0)*pz);
IkReal x79=((13.3695690947569)*pz);
IkReal x80=((11.3173042376749)*pz);
IkReal x81=(px*r01);
IkReal x82=((1.82136)*pz);
IkReal x83=((4.0)*pz);
IkReal x84=((10.5976309052431)*pz);
IkReal x85=((19.3212309052431)*x68);
IkReal x86=((1.01969728225511)*x64);
IkReal x87=((19.3212309052431)*x70);
IkReal x88=((19.3212309052431)*x71);
IkReal x89=((1.01969728225511)*x74);
IkReal x90=((0.211104)*x66);
IkReal x91=((0.211104)*x81);
IkReal x92=((1.82136)*x71);
IkReal x93=((0.422208)*x66);
IkReal x94=((1.82136)*x68);
IkReal x95=((1.82136)*x70);
IkReal x96=((0.09612409536)*x64);
IkReal x97=((0.24519566494489)*x64);
IkReal x98=((4.6459690947569)*x68);
IkReal x99=((4.6459690947569)*x70);
IkReal x100=((4.6459690947569)*x71);
IkReal x101=((0.24519566494489)*x74);
IkReal x102=(py*r02*sj0);
IkReal x103=((2.0)*x60);
IkReal x104=((4.0)*x60);
IkReal x105=((4.0)*x59);
IkReal x106=((4.0)*x61);
IkReal x107=((2.0)*x61);
IkReal x108=(px*r02*sj0);
IkReal x109=((2.0)*x59);
IkReal x110=(x68*x83);
IkReal x111=(r02*x109);
IkReal x112=(pz*r00*x67);
IkReal x113=(x64*x76);
IkReal x114=((0.211104)*x108);
IkReal x115=(x74*x76);
IkReal x116=(r02*x107);
IkReal x117=(r02*x103);
IkReal x118=((0.211104)*py*x73);
IkReal x119=(x62*x79);
IkReal x120=(x65*x79);
IkReal x121=((13.3695690947569)*x102);
IkReal x122=((13.3695690947569)*px*x73);
IkReal x123=(x71*x78);
IkReal x124=((1.82136)*px*x73);
IkReal x125=(x68*x78);
IkReal x126=((1.82136)*x102);
IkReal x127=((0.422208)*x108);
IkReal x128=(x64*x69);
IkReal x129=(r02*x105);
IkReal x130=(x69*x74);
IkReal x131=(r02*x104);
IkReal x132=(x65*x82);
IkReal x133=(r02*x106);
IkReal x134=((0.422208)*py*x73);
IkReal x135=(x62*x82);
IkReal x136=((10.5976309052431)*x102);
IkReal x137=((10.5976309052431)*px*x73);
IkReal x138=(x62*x84);
IkReal x139=(x65*x84);
IkReal x140=(x109*x65);
IkReal x141=(x103*x65);
IkReal x142=(x107*x62);
IkReal x143=(x109*x62);
IkReal x144=(sj0*x66*x67);
IkReal x145=(py*x64*x67);
IkReal x146=(cj0*x67*x70);
IkReal x147=(x107*x65);
IkReal x148=(x103*x62);
IkReal x149=((4.0)*py*sj0*x70);
IkReal x150=(x105*x65);
IkReal x151=(x105*x62);
IkReal x152=(x104*x65);
IkReal x153=(x106*x62);
IkReal x154=(x122+x121);
IkReal x155=(x137+x136);
IkReal x156=(x139+x138);
IkReal x157=(x120+x119);
IkReal x158=(x100+x99+x98+x97);
IkReal x159=(x88+x86+x87+x85);
IkReal x160=(x117+x116+x115+x118);
IkReal x161=(x113+x112+x111+x110+x114);
IkReal x162=(x140+x141+x142+x143+x90);
IkReal x163=(x135+x134+x131+x130+x133+x132);
IkReal x164=(x126+x127+x124+x125+x123+x128+x129);
IkReal x165=(x144+x145+x146+x147+x148+x149+x91);
IkReal x166=(x153+x152+x151+x150+x93+x92+x95+x94+x96);
IkReal x167=(((cj0*x70*x72))+((x104*x62))+(((8.0)*py*sj0*x70))+((x106*x65))+(((0.09612409536)*x74))+((py*x64*x72))+((sj0*x66*x72))+(((0.422208)*x81)));
IkReal x168=((((-1.0)*x164))+(((-31.3833389638759)*r02))+x163+(((94.1248398813898)*x65))+(((94.1248398813898)*x62)));
IkReal x169=((((-1.0)*x163))+(((70.264619627246)*r02))+x164+(((-81.518504899281)*x62))+(((-81.518504899281)*x65)));
IkReal x170=((((-1.0)*x161))+x160+x159+((x62*x63))+(((-28.8064557623251)*x102))+(((-136.567172379502)*x65))+(((-136.567172379502)*x62))+((x63*x65))+(((-1.0)*x89))+(((-28.8064557623251)*px*x73))+(((56.6139611458706)*r02)));
IkReal x171=((((-26.9850957623251)*px*x73))+(((-1.0)*x160))+(((-26.9850957623251)*x102))+x161+x159+((x62*x75))+(((-43.9118986102535)*r02))+(((-1.0)*x89))+(((127.769443099108)*x65))+(((127.769443099108)*x62))+((x65*x75)));
IkReal x172=((((-10.5680879741628)*x65))+(((-10.5680879741628)*x62))+(((-1.0)*x161))+((x62*x80))+((x65*x80))+(((-1.0)*x101))+(((-11.3173042376749)*px*x73))+x160+x158+(((12.8632632065684)*r02))+(((-11.3173042376749)*x102)));
IkReal x173=((((-1.0)*x160))+(((8.45259240655619)*x62))+(((8.45259240655619)*x65))+(((-1.0)*x101))+x161+x158+(((-9.49594423767486)*px*x73))+((x62*x77))+(((-9.49594423767486)*x102))+(((-8.12471092618554)*r02))+((x65*x77)));
IkReal x174=((((-1.0)*x167))+x166+(((264.33661547861)*r02))+(((100.111190724924)*x65))+(((100.111190724924)*x62)));
IkReal x175=((((-1.0)*x167))+x166+(((19.020680380719)*r02))+(((20.5733051015539)*x65))+(((20.5733051015539)*x62)));
IkReal x176=((((-18.8989042376749)*x71))+(((-18.8989042376749)*x70))+(((-1.0)*x154))+(((-1.0)*x162))+(((19.9943830097294)*x62))+(((19.9943830097294)*x65))+(((0.997408570047528)*x74))+x165+x157+(((-18.8989042376749)*x68))+(((-0.997408570047528)*x64))+(((50.1062697364982)*r02)));
IkReal x177=((((-1.0)*x154))+(((-1.0)*x165))+(((-44.0185701448916)*r02))+(((-17.0775442376749)*x70))+(((-17.0775442376749)*x71))+(((-0.901284474687528)*x64))+x162+x157+(((0.901284474687528)*x74))+(((-17.0775442376749)*x68))+(((-11.8036249853465)*x62))+(((-11.8036249853465)*x65)));
IkReal x178=((((-39.9645727250316)*x62))+(((-39.9645727250316)*x65))+(((-1.12016298771247)*x74))+(((-1.0)*x156))+(((21.2248557623251)*x71))+(((21.2248557623251)*x70))+(((-1.0)*x165))+(((1.12016298771247)*x64))+x162+x155+(((-43.1720150778372)*r02))+(((21.2248557623251)*x68)));
IkReal x179=((((-1.0)*x156))+(((1.02403889235247)*x64))+(((-1.0)*x162))+(((-1.02403889235247)*x74))+(((19.4034957623251)*x68))+(((38.3464898214438)*r02))+x165+x155+(((19.4034957623251)*x70))+(((19.4034957623251)*x71))+(((30.7147159334145)*x65))+(((30.7147159334145)*x62)));
IkReal gconst40=x170;
IkReal gconst41=x174;
IkReal gconst42=x171;
IkReal gconst43=x176;
IkReal gconst44=x168;
IkReal gconst45=x177;
IkReal gconst46=x170;
IkReal gconst47=x174;
IkReal gconst48=x171;
IkReal gconst49=x176;
IkReal gconst50=x168;
IkReal gconst51=x177;
IkReal gconst52=x178;
IkReal gconst53=x169;
IkReal gconst54=x179;
IkReal gconst55=x172;
IkReal gconst56=x175;
IkReal gconst57=x173;
IkReal gconst58=x178;
IkReal gconst59=x169;
IkReal gconst60=x179;
IkReal gconst61=x172;
IkReal gconst62=x175;
IkReal gconst63=x173;
IkReal x180=(gconst42*gconst43);
IkReal x181=(gconst45*gconst46);
IkReal x182=((1.0)*gconst52);
IkReal x183=(gconst46*gconst57);
IkReal x184=(gconst41*gconst62);
IkReal x185=(gconst53*gconst57);
IkReal x186=(gconst50*gconst58);
IkReal x187=(gconst54*gconst55);
IkReal x188=((1.0)*gconst59);
IkReal x189=(gconst48*gconst61);
IkReal x190=(gconst40*gconst57);
IkReal x191=(gconst50*gconst53);
IkReal x192=(gconst43*gconst54);
IkReal x193=(gconst46*gconst51);
IkReal x194=(gconst42*gconst47);
IkReal x195=(gconst56*gconst61);
IkReal x196=(gconst41*gconst45);
IkReal x197=(gconst45*gconst53);
IkReal x198=((1.0)*gconst60);
IkReal x199=(gconst42*gconst55);
IkReal x200=(gconst44*gconst49);
IkReal x201=(gconst54*gconst59);
IkReal x202=((1.0)*gconst54);
IkReal x203=(gconst46*gconst62);
IkReal x204=((1.0)*gconst40);
IkReal x205=(gconst41*gconst50);
IkReal x206=(gconst46*gconst63);
IkReal x207=(gconst58*gconst63);
IkReal x208=(gconst58*gconst62);
IkReal x209=(gconst45*gconst52);
IkReal x210=(gconst48*gconst49);
IkReal x211=(gconst51*gconst58);
IkReal x212=(gconst49*gconst60);
IkReal x213=(gconst41*gconst57);
IkReal x214=(gconst42*gconst59);
IkReal x215=(gconst49*gconst56);
IkReal x216=(gconst44*gconst61);
IkReal x217=(gconst46*gconst50);
IkReal x218=(gconst52*gconst57);
IkReal x219=(gconst47*gconst54);
IkReal x220=(gconst40*gconst45);
IkReal x221=(gconst60*gconst61);
IkReal x222=(gconst53*gconst62);
IkReal x223=((1.0)*x210);
IkReal x224=((1.0)*gconst42*gconst56);
IkReal x225=((1.0)*gconst47*gconst61);
IkReal x226=((1.0)*gconst42*gconst44);
IkReal x227=((1.0)*gconst47*gconst49);
op[0]=((((-1.0)*gconst57*x182*x207))+((x187*x207))+((x195*x201))+(((-1.0)*gconst56*x202*x208))+((x185*x208))+((x218*x221))+(((-1.0)*gconst61*x185*x188))+(((-1.0)*gconst61*x187*x198)));
op[1]=((((-1.0)*gconst45*x182*x207))+(((-1.0)*x190*x207))+((x187*x206))+(((-1.0)*gconst61*x188*x197))+((x192*x207))+(((-1.0)*gconst61*x198*x199))+((x209*x221))+(((-1.0)*gconst56*x202*x203))+((x185*x186))+(((-1.0)*gconst49*x185*x188))+(((-1.0)*x208*x224))+((x197*x208))+(((-1.0)*x187*x189))+(((-1.0)*gconst57*x182*x211))+((x212*x218))+(((-1.0)*gconst56*x186*x202))+((x183*x222))+(((-1.0)*gconst49*x187*x198))+((x189*x218))+(((-1.0)*gconst61*x192*x198))+(((-1.0)*gconst44*x202*x208))+(((-1.0)*gconst63*x182*x183))+((x187*x211))+(((-1.0)*gconst61*x188*x213))+((x190*x221))+((x199*x207))+(((-1.0)*x185*x225))+((gconst57*gconst58*x184))+((x195*x219))+((x195*x214))+((x201*x216))+((x201*x215)));
op[2]=(((x190*x212))+(((-1.0)*gconst51*x182*x183))+(((-1.0)*gconst63*x183*x204))+(((-1.0)*gconst45*x182*x211))+(((-1.0)*x186*x224))+((x214*x216))+((x214*x215))+((x180*x207))+(((-1.0)*gconst49*x198*x199))+((x186*x197))+((x210*x218))+((x199*x211))+(((-1.0)*gconst61*x188*x196))+((x187*x193))+((x200*x201))+((x192*x206))+((x216*x219))+(((-1.0)*gconst49*x188*x197))+(((-1.0)*x213*x225))+((x215*x219))+((x189*x209))+(((-1.0)*x189*x199))+(((-1.0)*x189*x192))+((x189*x190))+(((-1.0)*x190*x211))+(((-1.0)*x208*x226))+((x209*x212))+((x220*x221))+(((-1.0)*gconst49*x192*x198))+((x194*x195))+(((-1.0)*gconst44*x186*x202))+(((-1.0)*gconst63*x181*x182))+((x186*x213))+(((-1.0)*x203*x224))+(((-1.0)*gconst56*x202*x217))+(((-1.0)*gconst61*x180*x198))+((x181*x222))+((gconst45*gconst58*x184))+(((-1.0)*gconst45*x204*x207))+(((-1.0)*gconst44*x202*x203))+((x192*x211))+(((-1.0)*gconst49*x188*x213))+((x183*x184))+((x199*x206))+(((-1.0)*x187*x223))+(((-1.0)*x185*x227))+((x183*x191))+(((-1.0)*x197*x225)));
op[3]=(((x190*x210))+((x189*x220))+(((-1.0)*x186*x226))+((x180*x206))+((x186*x196))+((x193*x199))+(((-1.0)*x192*x223))+(((-1.0)*gconst63*x181*x204))+(((-1.0)*gconst49*x188*x196))+(((-1.0)*x213*x227))+(((-1.0)*x180*x189))+(((-1.0)*x196*x225))+((x209*x210))+(((-1.0)*x199*x223))+((x192*x193))+(((-1.0)*gconst45*x204*x211))+(((-1.0)*gconst49*x180*x198))+(((-1.0)*x203*x226))+(((-1.0)*x217*x224))+((x180*x211))+((x183*x205))+((x181*x191))+(((-1.0)*gconst51*x181*x182))+((x194*x216))+((x194*x215))+(((-1.0)*gconst44*x202*x217))+((x200*x214))+((x200*x219))+(((-1.0)*gconst51*x183*x204))+((x181*x184))+(((-1.0)*x197*x227))+((x212*x220)));
op[4]=(((x210*x220))+(((-1.0)*gconst51*x181*x204))+((x194*x200))+((x180*x193))+(((-1.0)*x180*x223))+(((-1.0)*x196*x227))+(((-1.0)*x217*x226))+((x181*x205)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x228=IKPowWithIntegerCheck(IKsign(((((((((5.14332627538849)*cj0*r00*sj2))+(((-2.0)*cj0*px*py*r01*sj2))+(((-0.105552)*cj0*pz*r01))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.105552)*px*r01*sj2))+(((-0.02403102384)*r00*sj0*sj2))+((cj0*r00*sj2*(pz*pz)))+(((0.45534)*px*r00*sj2))+(((-0.45534)*cj0*px*r02))+((r01*sj0*sj2*(px*px)))+((r01*sj0*sj2*(pz*pz)))+(((0.105552)*pz*r00*sj0))+(((-0.105552)*cj0*cj2*pz*r01))+((cj2*r02*(py*py)))+(((0.45534)*pz*r01*sj0))+(((-2.0)*py*pz*r02*sj0*sj2))+((cj0*r00*sj2*(py*py)))+(((0.105552)*cj2*pz*r00*sj0))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((0.45534)*cj0*pz*r00))+(((0.105552)*cj0*cj2*py*r02))+((r02*(py*py)))+((cj2*r02*(px*px)))+(((23.5312099703475)*cj2*r01*sj0))+(((5.14332627538849)*r01*sj0*sj2))+((r02*(px*px)))+(((23.5312099703475)*cj0*r00))+(((-0.45534)*cj2*py*r02*sj0))+(((0.105552)*cj0*py*r02))+(((-2.0)*px*py*r00*sj0*sj2))+(((0.45534)*cj2*pz*r01*sj0))+(((0.02403102384)*cj0*r01*sj2))+(((-0.105552)*cj2*px*r02*sj0))+(((23.5312099703475)*r01*sj0))+(((-7.84583474096898)*r02))+(((4.75517009517975)*r02*sj2))+(((0.45534)*cj0*cj2*pz*r00))+(((-0.105552)*px*r02*sj0))+(((-2.0)*cj2*py*pz*r01))+(((0.45534)*py*r01*sj2))+(((-2.0)*px*pz*r00))+(((-7.84583474096898)*cj2*r02))+(((23.5312099703475)*cj0*cj2*r00))+(((-0.45534)*py*r02*sj0))+(((-1.0)*cj0*r00*sj2*(px*px)))+(((-2.0)*cj2*px*pz*r00))+(((-0.45534)*cj0*cj2*px*r02))+(((-2.0)*py*pz*r01))+(((0.105552)*py*r00*sj2))+(((-2.0)*cj0*px*pz*r02*sj2))+(((-1.0)*r02*(pz*pz)))+(((0.45534)*pz*r02*sj2))))*(((((-2.0)*cj0*px*py*r01*sj2))+(((-0.105552)*cj0*pz*r01))+(((-66.0841538696525)*r01*sj0))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.105552)*px*r01*sj2))+(((-0.02403102384)*r00*sj0*sj2))+((cj0*r00*sj2*(pz*pz)))+(((0.45534)*px*r00*sj2))+(((-0.45534)*cj0*px*r02))+((r01*sj0*sj2*(px*px)))+((r01*sj0*sj2*(pz*pz)))+(((0.105552)*pz*r00*sj0))+(((-0.105552)*cj0*cj2*pz*r01))+((cj2*r02*(py*py)))+(((0.45534)*pz*r01*sj0))+(((-2.0)*py*pz*r02*sj0*sj2))+((cj0*r00*sj2*(py*py)))+(((0.105552)*cj2*pz*r00*sj0))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((0.45534)*cj0*pz*r00))+(((0.105552)*cj0*cj2*py*r02))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r02*(px*px)))+(((-20.3796262248202)*r02*sj2))+(((-0.45534)*cj2*py*r02*sj0))+(((-66.0841538696525)*cj0*r00))+(((25.131464939031)*cj2*r02))+(((0.105552)*cj0*py*r02))+(((-17.6698221646115)*r01*sj0*sj2))+(((25.131464939031)*r02))+(((-2.0)*px*py*r00*sj0*sj2))+(((0.45534)*cj2*pz*r01*sj0))+(((0.02403102384)*cj0*r01*sj2))+(((-0.105552)*cj2*px*r02*sj0))+(((-17.6698221646115)*cj0*r00*sj2))+(((0.45534)*cj0*cj2*pz*r00))+(((-0.105552)*px*r02*sj0))+(((-2.0)*cj2*py*pz*r01))+(((0.45534)*py*r01*sj2))+(((-2.0)*px*pz*r00))+(((-66.0841538696525)*cj0*cj2*r00))+(((-66.0841538696525)*cj2*r01*sj0))+(((-0.45534)*py*r02*sj0))+(((-1.0)*cj0*r00*sj2*(px*px)))+(((-2.0)*cj2*px*pz*r00))+(((-0.45534)*cj0*cj2*px*r02))+(((-2.0)*py*pz*r01))+(((0.105552)*py*r00*sj2))+(((-2.0)*cj0*px*pz*r02*sj2))+(((-1.0)*r02*(pz*pz)))+(((0.45534)*pz*r02*sj2))))))+(((((((-1.0)*cj2*r01*sj0*(py*py)))+(((0.02403102384)*cj0*r01))+(((-23.5312099703475)*r02))+(((1.0)*cj2*r01*sj0*(pz*pz)))+(((-0.02403102384)*r00*sj0))+(((-5.24699353318849)*r02*sj2))+(((1.0)*r01*sj0*(px*px)))+(((-7.94950199876898)*cj2*r01*sj0))+(((0.45534)*cj2*px*r00))+(((0.45534)*py*r02*sj0*sj2))+(((-23.5312099703475)*cj2*r02))+(((1.0)*cj0*cj2*r00*(pz*pz)))+(((1.0)*cj0*r00*(pz*pz)))+(((-0.02403102384)*cj2*r00*sj0))+(((0.45534)*px*r00))+(((-0.105552)*pz*r00*sj0*sj2))+(((-1.0)*r02*sj2*(py*py)))+(((0.45534)*cj0*px*r02*sj2))+(((1.0)*cj0*cj2*r00*(py*py)))+(((-7.94950199876898)*cj0*r00))+(((0.105552)*px*r02*sj0*sj2))+(((1.0)*cj2*r01*sj0*(px*px)))+(((-0.105552)*px*r01))+(((-1.0)*cj0*cj2*r00*(px*px)))+(((-0.105552)*cj2*px*r01))+(((0.45534)*pz*r02))+(((-7.94950199876898)*r01*sj0))+(((0.02403102384)*cj0*cj2*r01))+(((2.0)*py*pz*r01*sj2))+(((0.105552)*py*r00))+(((-2.0)*cj0*cj2*px*pz*r02))+(((0.45534)*py*r01))+(((0.105552)*cj0*pz*r01*sj2))+(((-2.0)*cj2*py*pz*r02*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((1.0)*r02*sj2*(pz*pz)))+(((-2.0)*cj0*px*py*r01))+(((0.45534)*cj2*pz*r02))+(((-2.0)*cj2*px*py*r00*sj0))+(((4.75517009517975)*cj0*r00*sj2))+(((-1.0)*cj0*r00*(px*px)))+(((0.105552)*cj2*py*r00))+(((1.0)*cj0*r00*(py*py)))+(((-0.45534)*pz*r01*sj0*sj2))+(((0.45534)*cj2*py*r01))+(((-0.105552)*cj0*py*r02*sj2))+(((-0.45534)*cj0*pz*r00*sj2))+(((2.0)*px*pz*r00*sj2))+(((-7.94950199876898)*cj0*cj2*r00))+(((-1.0)*r01*sj0*(py*py)))+(((-2.0)*cj0*px*pz*r02))+(((-2.0)*px*py*r00*sj0))+(((-2.0)*cj0*cj2*px*py*r01))+(((4.75517009517975)*r01*sj0*sj2))+(((1.0)*r01*sj0*(pz*pz)))+(((-2.0)*py*pz*r02*sj0))))*(((((-1.0)*cj2*r01*sj0*(py*py)))+(((0.02403102384)*cj0*r01))+(((-20.3796262248202)*r01*sj0*sj2))+(((25.027797681231)*r01*sj0))+(((25.027797681231)*cj2*r01*sj0))+((r01*sj0*(pz*pz)))+((cj2*r01*sj0*(pz*pz)))+(((25.027797681231)*cj0*cj2*r00))+((cj0*cj2*r00*(pz*pz)))+((cj0*cj2*r00*(py*py)))+(((-0.02403102384)*r00*sj0))+(((0.45534)*cj2*px*r00))+(((0.45534)*py*r02*sj0*sj2))+(((-0.02403102384)*cj2*r00*sj0))+(((0.45534)*px*r00))+(((-0.105552)*pz*r00*sj0*sj2))+(((-1.0)*r02*sj2*(py*py)))+(((0.45534)*cj0*px*r02*sj2))+((r02*sj2*(pz*pz)))+(((0.105552)*px*r02*sj0*sj2))+(((-0.105552)*px*r01))+(((-1.0)*cj0*cj2*r00*(px*px)))+(((-0.105552)*cj2*px*r01))+(((0.45534)*pz*r02))+(((0.02403102384)*cj0*cj2*r01))+((r01*sj0*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((0.105552)*py*r00))+(((-2.0)*cj0*cj2*px*pz*r02))+(((0.45534)*py*r01))+(((0.105552)*cj0*pz*r01*sj2))+(((-2.0)*cj2*py*pz*r02*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r01))+(((0.45534)*cj2*pz*r02))+(((-2.0)*cj2*px*py*r00*sj0))+(((-20.3796262248202)*cj0*r00*sj2))+((cj0*r00*(py*py)))+(((25.027797681231)*cj0*r00))+(((-1.0)*cj0*r00*(px*px)))+((cj0*r00*(pz*pz)))+((cj2*r01*sj0*(px*px)))+(((0.105552)*cj2*py*r00))+(((-0.45534)*pz*r01*sj0*sj2))+(((0.45534)*cj2*py*r01))+(((-0.105552)*cj0*py*r02*sj2))+(((-0.45534)*cj0*pz*r00*sj2))+(((2.0)*px*pz*r00*sj2))+(((66.0841538696525)*r02))+(((-1.0)*r01*sj0*(py*py)))+(((-2.0)*cj0*px*pz*r02))+(((-2.0)*px*py*r00*sj0))+(((-2.0)*cj0*cj2*px*py*r01))+(((17.5661549068115)*r02*sj2))+(((66.0841538696525)*cj2*r02))+(((-2.0)*py*pz*r02*sj0)))))))),-1);
if(!x228.valid){
continue;
}
CheckValue<IkReal> x229 = IKatan2WithCheck(IkReal(((((((((10.1570878811626)*py*r01*sj2))+(((-5.29881545262155)*cj0*pz*r00*sj2))+(((-13.9478878811626)*cj0*cj2*px*r02))+(((0.509848641127555)*cj0*cj2*r01))+(((-0.509848641127555)*cj2*r00*sj0))+(((3.17551563390428)*r02))+(((9.66061545262155)*py*r01))+(((-0.509848641127555)*r00*sj0))+(((-2.31246419790428)*cj0*r00*sj2))+(((-2.19943232009835)*r01*sj0))+(((9.66061545262155)*cj2*pz*r02))+(((-2.31246419790428)*r01*sj0*sj2))+(((3.17551563390428)*cj2*r02))+(((9.66061545262155)*cj2*py*r01))+(((-13.9478878811626)*py*r02*sj0))+(((10.1570878811626)*px*r00*sj2))+(((13.9478878811626)*pz*r01*sj0))+(((13.9478878811626)*cj2*pz*r01*sj0))+(((-0.536050470016236)*r00*sj0*sj2))+(((9.66061545262155)*px*r00))+(((10.1570878811626)*pz*r02*sj2))+(((0.536050470016236)*cj0*r01*sj2))+(((9.66061545262155)*cj2*px*r00))+(((-2.19943232009835)*cj0*cj2*r00))+(((13.9478878811626)*cj0*pz*r00))+(((-2.19943232009835)*cj0*r00))+(((-2.19943232009835)*cj2*r01*sj0))+(((-13.9478878811626)*cj2*py*r02*sj0))+(((-13.9478878811626)*cj0*px*r02))+(((-5.29881545262155)*pz*r01*sj0*sj2))+(((-1.20638131409835)*r02*sj2))+(((5.29881545262155)*py*r02*sj0*sj2))+(((9.66061545262155)*pz*r02))+(((0.509848641127555)*cj0*r01))+(((13.9478878811626)*cj0*cj2*pz*r00))+(((5.29881545262155)*cj0*px*r02*sj2))))*(((((-0.45534)*px*r00))+(((-1.0)*cj0*r00*(py*py)))+((r02*sj2*(py*py)))+(((-1.0)*cj0*r00*(pz*pz)))+(((2.0)*py*pz*r02*sj0))+(((-0.105552)*px*r02*sj0*sj2))+(((-1.0)*r01*sj0*(px*px)))+(((-0.45534)*cj0*px*r02*sj2))+(((-1.0)*r02*sj2*(pz*pz)))+(((-4.75517009517975)*r01*sj0*sj2))+(((0.02403102384)*r00*sj0))+(((-0.45534)*cj2*pz*r02))+(((7.94950199876898)*cj0*r00))+(((-1.0)*cj2*r01*sj0*(px*px)))+(((7.94950199876898)*r01*sj0))+(((-4.75517009517975)*cj0*r00*sj2))+(((2.0)*cj2*px*py*r00*sj0))+(((-0.45534)*py*r02*sj0*sj2))+((cj0*cj2*r00*(px*px)))+(((23.5312099703475)*cj2*r02))+(((-1.0)*r01*sj0*(pz*pz)))+(((-0.45534)*cj2*px*r00))+(((0.45534)*pz*r01*sj0*sj2))+(((2.0)*cj2*py*pz*r02*sj0))+(((0.02403102384)*cj2*r00*sj0))+((cj0*r00*(px*px)))+(((-0.45534)*py*r01))+(((7.94950199876898)*cj2*r01*sj0))+(((-0.45534)*pz*r02))+(((23.5312099703475)*r02))+(((0.45534)*cj0*pz*r00*sj2))+(((2.0)*cj0*cj2*px*pz*r02))+(((-0.105552)*py*r00))+(((-1.0)*cj0*cj2*r00*(pz*pz)))+(((2.0)*px*py*r00*sj0))+(((0.105552)*px*r01))+(((-2.0)*px*pz*r00*sj2))+(((-0.02403102384)*cj0*cj2*r01))+(((-2.0)*py*pz*r01*sj2))+(((-0.105552)*cj0*pz*r01*sj2))+(((2.0)*cj0*px*py*r01))+((r02*sj2*(px*px)))+(((2.0)*cj0*cj2*px*py*r01))+(((-1.0)*cj0*cj2*r00*(py*py)))+(((2.0)*cj0*px*pz*r02))+((cj2*r01*sj0*(py*py)))+(((5.24699353318849)*r02*sj2))+(((-0.02403102384)*cj0*r01))+(((0.105552)*cj0*py*r02*sj2))+(((0.105552)*pz*r00*sj0*sj2))+(((-0.105552)*cj2*py*r00))+(((-0.45534)*cj2*py*r01))+((r01*sj0*(py*py)))+(((7.94950199876898)*cj0*cj2*r00))+(((0.105552)*cj2*px*r01))+(((-1.0)*cj2*r01*sj0*(pz*pz)))))))+(((((((0.474673261183764)*cj0*cj2*r01))+(((5.20331211883743)*cj0*px*r02*sj2))+(((6.68478454737845)*cj0*px*r02))+(((6.68478454737845)*py*r02*sj0))+(((-0.122597832472445)*cj0*r01*sj2))+(((8.99411211883743)*pz*r02))+(((-2.04768950609572)*cj2*r01*sj0))+(((0.528873891901652)*r01*sj0*sj2))+(((0.474673261183764)*cj0*r01))+(((0.528873891901652)*cj0*r00*sj2))+(((-6.68478454737845)*cj0*cj2*pz*r00))+(((8.99411211883743)*px*r00))+(((8.99411211883743)*cj2*pz*r02))+(((8.99411211883743)*py*r01))+(((-0.474673261183764)*cj2*r00*sj0))+(((5.20331211883743)*py*r02*sj0*sj2))+(((-2.04768950609572)*r01*sj0))+(((-1.52192489790165)*r02))+(((6.68478454737845)*cj2*py*r02*sj0))+(((-6.68478454737845)*pz*r01*sj0))+(((-5.20331211883743)*cj0*pz*r00*sj2))+(((8.99411211883743)*cj2*py*r01))+(((-2.32298454737845)*px*r00*sj2))+(((-6.68478454737845)*cj2*pz*r01*sj0))+(((-0.474673261183764)*r00*sj0))+(((8.99411211883743)*cj2*px*r00))+(((-2.04768950609572)*cj0*r00))+(((-2.04768950609572)*cj0*cj2*r00))+(((-1.18463807009572)*r02*sj2))+(((0.122597832472445)*r00*sj0*sj2))+(((-2.32298454737845)*py*r01*sj2))+(((-6.68478454737845)*cj0*pz*r00))+(((-2.32298454737845)*pz*r02*sj2))+(((-5.20331211883743)*pz*r01*sj0*sj2))+(((6.68478454737845)*cj0*cj2*px*r02))+(((-1.52192489790165)*cj2*r02))))*(((((-2.0)*cj0*px*py*r01*sj2))+(((-0.105552)*cj0*pz*r01))+(((-66.0841538696525)*r01*sj0))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.105552)*px*r01*sj2))+(((-0.02403102384)*r00*sj0*sj2))+((cj0*r00*sj2*(pz*pz)))+(((0.45534)*px*r00*sj2))+(((-0.45534)*cj0*px*r02))+((r01*sj0*sj2*(px*px)))+((r01*sj0*sj2*(pz*pz)))+(((0.105552)*pz*r00*sj0))+(((-0.105552)*cj0*cj2*pz*r01))+((cj2*r02*(py*py)))+(((0.45534)*pz*r01*sj0))+(((-2.0)*py*pz*r02*sj0*sj2))+((cj0*r00*sj2*(py*py)))+(((0.105552)*cj2*pz*r00*sj0))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((0.45534)*cj0*pz*r00))+(((0.105552)*cj0*cj2*py*r02))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r02*(px*px)))+(((-20.3796262248202)*r02*sj2))+(((-0.45534)*cj2*py*r02*sj0))+(((-66.0841538696525)*cj0*r00))+(((25.131464939031)*cj2*r02))+(((0.105552)*cj0*py*r02))+(((-17.6698221646115)*r01*sj0*sj2))+(((25.131464939031)*r02))+(((-2.0)*px*py*r00*sj0*sj2))+(((0.45534)*cj2*pz*r01*sj0))+(((0.02403102384)*cj0*r01*sj2))+(((-0.105552)*cj2*px*r02*sj0))+(((-17.6698221646115)*cj0*r00*sj2))+(((0.45534)*cj0*cj2*pz*r00))+(((-0.105552)*px*r02*sj0))+(((-2.0)*cj2*py*pz*r01))+(((0.45534)*py*r01*sj2))+(((-2.0)*px*pz*r00))+(((-66.0841538696525)*cj0*cj2*r00))+(((-66.0841538696525)*cj2*r01*sj0))+(((-0.45534)*py*r02*sj0))+(((-1.0)*cj0*r00*sj2*(px*px)))+(((-2.0)*cj2*px*pz*r00))+(((-0.45534)*cj0*cj2*px*r02))+(((-2.0)*py*pz*r01))+(((0.105552)*py*r00*sj2))+(((-2.0)*cj0*px*pz*r02*sj2))+(((-1.0)*r02*(pz*pz)))+(((0.45534)*pz*r02*sj2)))))))),IkReal(((((((((-9.66061545262155)*pz*r02))+(((-0.509848641127555)*cj0*cj2*r01))+(((-10.1570878811626)*pz*r02*sj2))+(((-0.509848641127555)*cj0*r01))+(((1.20638131409835)*r02*sj2))+(((13.9478878811626)*cj0*px*r02))+(((-5.29881545262155)*cj0*px*r02*sj2))+(((2.19943232009835)*r01*sj0))+(((5.29881545262155)*pz*r01*sj0*sj2))+(((-13.9478878811626)*cj0*cj2*pz*r00))+(((2.31246419790428)*cj0*r00*sj2))+(((13.9478878811626)*py*r02*sj0))+(((-9.66061545262155)*px*r00))+(((-10.1570878811626)*py*r01*sj2))+(((-13.9478878811626)*cj0*pz*r00))+(((5.29881545262155)*cj0*pz*r00*sj2))+(((13.9478878811626)*cj2*py*r02*sj0))+(((2.19943232009835)*cj0*r00))+(((2.19943232009835)*cj2*r01*sj0))+(((13.9478878811626)*cj0*cj2*px*r02))+(((2.19943232009835)*cj0*cj2*r00))+(((-3.17551563390428)*r02))+(((-3.17551563390428)*cj2*r02))+(((2.31246419790428)*r01*sj0*sj2))+(((-5.29881545262155)*py*r02*sj0*sj2))+(((0.509848641127555)*cj2*r00*sj0))+(((-9.66061545262155)*cj2*px*r00))+(((-9.66061545262155)*cj2*py*r01))+(((-13.9478878811626)*pz*r01*sj0))+(((-9.66061545262155)*py*r01))+(((-0.536050470016236)*cj0*r01*sj2))+(((-10.1570878811626)*px*r00*sj2))+(((0.536050470016236)*r00*sj0*sj2))+(((-9.66061545262155)*cj2*pz*r02))+(((0.509848641127555)*r00*sj0))+(((-13.9478878811626)*cj2*pz*r01*sj0))))*(((((5.14332627538849)*cj0*r00*sj2))+(((-2.0)*cj0*px*py*r01*sj2))+(((-0.105552)*cj0*pz*r01))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.105552)*px*r01*sj2))+(((-0.02403102384)*r00*sj0*sj2))+((cj0*r00*sj2*(pz*pz)))+(((0.45534)*px*r00*sj2))+(((-0.45534)*cj0*px*r02))+((r01*sj0*sj2*(px*px)))+((r01*sj0*sj2*(pz*pz)))+(((0.105552)*pz*r00*sj0))+(((-0.105552)*cj0*cj2*pz*r01))+((cj2*r02*(py*py)))+(((0.45534)*pz*r01*sj0))+(((-2.0)*py*pz*r02*sj0*sj2))+((cj0*r00*sj2*(py*py)))+(((0.105552)*cj2*pz*r00*sj0))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((0.45534)*cj0*pz*r00))+(((0.105552)*cj0*cj2*py*r02))+((r02*(py*py)))+((cj2*r02*(px*px)))+(((23.5312099703475)*cj2*r01*sj0))+(((5.14332627538849)*r01*sj0*sj2))+((r02*(px*px)))+(((23.5312099703475)*cj0*r00))+(((-0.45534)*cj2*py*r02*sj0))+(((0.105552)*cj0*py*r02))+(((-2.0)*px*py*r00*sj0*sj2))+(((0.45534)*cj2*pz*r01*sj0))+(((0.02403102384)*cj0*r01*sj2))+(((-0.105552)*cj2*px*r02*sj0))+(((23.5312099703475)*r01*sj0))+(((-7.84583474096898)*r02))+(((4.75517009517975)*r02*sj2))+(((0.45534)*cj0*cj2*pz*r00))+(((-0.105552)*px*r02*sj0))+(((-2.0)*cj2*py*pz*r01))+(((0.45534)*py*r01*sj2))+(((-2.0)*px*pz*r00))+(((-7.84583474096898)*cj2*r02))+(((23.5312099703475)*cj0*cj2*r00))+(((-0.45534)*py*r02*sj0))+(((-1.0)*cj0*r00*sj2*(px*px)))+(((-2.0)*cj2*px*pz*r00))+(((-0.45534)*cj0*cj2*px*r02))+(((-2.0)*py*pz*r01))+(((0.105552)*py*r00*sj2))+(((-2.0)*cj0*px*pz*r02*sj2))+(((-1.0)*r02*(pz*pz)))+(((0.45534)*pz*r02*sj2))))))+(((((((-8.99411211883743)*pz*r02))+(((5.20331211883743)*cj0*pz*r00*sj2))+(((6.68478454737845)*cj0*cj2*pz*r00))+(((-6.68478454737845)*cj0*cj2*px*r02))+(((0.474673261183764)*r00*sj0))+(((2.04768950609572)*r01*sj0))+(((-8.99411211883743)*px*r00))+(((6.68478454737845)*pz*r01*sj0))+(((5.20331211883743)*pz*r01*sj0*sj2))+(((-6.68478454737845)*cj2*py*r02*sj0))+(((2.04768950609572)*cj2*r01*sj0))+(((-0.474673261183764)*cj0*r01))+(((-0.122597832472445)*r00*sj0*sj2))+(((-0.474673261183764)*cj0*cj2*r01))+(((6.68478454737845)*cj0*pz*r00))+(((-8.99411211883743)*cj2*px*r00))+(((-6.68478454737845)*py*r02*sj0))+(((1.52192489790165)*r02))+(((2.32298454737845)*pz*r02*sj2))+(((0.474673261183764)*cj2*r00*sj0))+(((2.04768950609572)*cj0*cj2*r00))+(((-6.68478454737845)*cj0*px*r02))+(((2.32298454737845)*py*r01*sj2))+(((0.122597832472445)*cj0*r01*sj2))+(((-0.528873891901652)*r01*sj0*sj2))+(((2.04768950609572)*cj0*r00))+(((-5.20331211883743)*cj0*px*r02*sj2))+(((-8.99411211883743)*cj2*py*r01))+(((2.32298454737845)*px*r00*sj2))+(((1.52192489790165)*cj2*r02))+(((-8.99411211883743)*py*r01))+(((-0.528873891901652)*cj0*r00*sj2))+(((-8.99411211883743)*cj2*pz*r02))+(((6.68478454737845)*cj2*pz*r01*sj0))+(((-5.20331211883743)*py*r02*sj0*sj2))+(((1.18463807009572)*r02*sj2))))*(((((-1.0)*cj2*r01*sj0*(py*py)))+(((0.02403102384)*cj0*r01))+(((-20.3796262248202)*r01*sj0*sj2))+(((25.027797681231)*r01*sj0))+(((25.027797681231)*cj2*r01*sj0))+((r01*sj0*(pz*pz)))+((cj2*r01*sj0*(pz*pz)))+(((25.027797681231)*cj0*cj2*r00))+((cj0*cj2*r00*(pz*pz)))+((cj0*cj2*r00*(py*py)))+(((-0.02403102384)*r00*sj0))+(((0.45534)*cj2*px*r00))+(((0.45534)*py*r02*sj0*sj2))+(((-0.02403102384)*cj2*r00*sj0))+(((0.45534)*px*r00))+(((-0.105552)*pz*r00*sj0*sj2))+(((-1.0)*r02*sj2*(py*py)))+(((0.45534)*cj0*px*r02*sj2))+((r02*sj2*(pz*pz)))+(((0.105552)*px*r02*sj0*sj2))+(((-0.105552)*px*r01))+(((-1.0)*cj0*cj2*r00*(px*px)))+(((-0.105552)*cj2*px*r01))+(((0.45534)*pz*r02))+(((0.02403102384)*cj0*cj2*r01))+((r01*sj0*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((0.105552)*py*r00))+(((-2.0)*cj0*cj2*px*pz*r02))+(((0.45534)*py*r01))+(((0.105552)*cj0*pz*r01*sj2))+(((-2.0)*cj2*py*pz*r02*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r01))+(((0.45534)*cj2*pz*r02))+(((-2.0)*cj2*px*py*r00*sj0))+(((-20.3796262248202)*cj0*r00*sj2))+((cj0*r00*(py*py)))+(((25.027797681231)*cj0*r00))+(((-1.0)*cj0*r00*(px*px)))+((cj0*r00*(pz*pz)))+((cj2*r01*sj0*(px*px)))+(((0.105552)*cj2*py*r00))+(((-0.45534)*pz*r01*sj0*sj2))+(((0.45534)*cj2*py*r01))+(((-0.105552)*cj0*py*r02*sj2))+(((-0.45534)*cj0*pz*r00*sj2))+(((2.0)*px*pz*r00*sj2))+(((66.0841538696525)*r02))+(((-1.0)*r01*sj0*(py*py)))+(((-2.0)*cj0*px*pz*r02))+(((-2.0)*px*py*r00*sj0))+(((-2.0)*cj0*cj2*px*py*r01))+(((17.5661549068115)*r02*sj2))+(((66.0841538696525)*cj2*r02))+(((-2.0)*py*pz*r02*sj0)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x229.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x228.value)))+(x229.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
evalcond[0]=((((10.1570878811626)*py*r01*sj2))+(((-5.29881545262155)*cj0*pz*r00*sj2))+(((-13.9478878811626)*cj0*cj2*px*r02))+(((0.509848641127555)*cj0*cj2*r01))+(((-0.509848641127555)*cj2*r00*sj0))+(((3.17551563390428)*r02))+(((9.66061545262155)*py*r01))+(((-0.509848641127555)*r00*sj0))+(((-2.31246419790428)*cj0*r00*sj2))+(((-2.19943232009835)*r01*sj0))+(((9.66061545262155)*cj2*pz*r02))+(((-2.31246419790428)*r01*sj0*sj2))+(((3.17551563390428)*cj2*r02))+(((9.66061545262155)*cj2*py*r01))+(((-13.9478878811626)*py*r02*sj0))+(((10.1570878811626)*px*r00*sj2))+(((13.9478878811626)*pz*r01*sj0))+(((13.9478878811626)*cj2*pz*r01*sj0))+(((-0.536050470016236)*r00*sj0*sj2))+(((9.66061545262155)*px*r00))+(((10.1570878811626)*pz*r02*sj2))+(((0.536050470016236)*cj0*r01*sj2))+(((9.66061545262155)*cj2*px*r00))+(((((((-1.0)*cj2*r01*sj0*(py*py)))+(((0.02403102384)*cj0*r01))+(((-20.3796262248202)*r01*sj0*sj2))+(((25.027797681231)*r01*sj0))+(((25.027797681231)*cj2*r01*sj0))+((r01*sj0*(pz*pz)))+((cj2*r01*sj0*(pz*pz)))+(((25.027797681231)*cj0*cj2*r00))+((cj0*cj2*r00*(pz*pz)))+((cj0*cj2*r00*(py*py)))+(((-0.02403102384)*r00*sj0))+(((0.45534)*cj2*px*r00))+(((0.45534)*py*r02*sj0*sj2))+(((-0.02403102384)*cj2*r00*sj0))+(((0.45534)*px*r00))+(((-0.105552)*pz*r00*sj0*sj2))+(((-1.0)*r02*sj2*(py*py)))+(((0.45534)*cj0*px*r02*sj2))+((r02*sj2*(pz*pz)))+(((0.105552)*px*r02*sj0*sj2))+(((-0.105552)*px*r01))+(((-1.0)*cj0*cj2*r00*(px*px)))+(((-0.105552)*cj2*px*r01))+(((0.45534)*pz*r02))+(((0.02403102384)*cj0*cj2*r01))+((r01*sj0*(px*px)))+(((2.0)*py*pz*r01*sj2))+(((0.105552)*py*r00))+(((-2.0)*cj0*cj2*px*pz*r02))+(((0.45534)*py*r01))+(((0.105552)*cj0*pz*r01*sj2))+(((-2.0)*cj2*py*pz*r02*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r01))+(((0.45534)*cj2*pz*r02))+(((-2.0)*cj2*px*py*r00*sj0))+(((-20.3796262248202)*cj0*r00*sj2))+((cj0*r00*(py*py)))+(((25.027797681231)*cj0*r00))+(((-1.0)*cj0*r00*(px*px)))+((cj0*r00*(pz*pz)))+((cj2*r01*sj0*(px*px)))+(((0.105552)*cj2*py*r00))+(((-0.45534)*pz*r01*sj0*sj2))+(((0.45534)*cj2*py*r01))+(((-0.105552)*cj0*py*r02*sj2))+(((-0.45534)*cj0*pz*r00*sj2))+(((2.0)*px*pz*r00*sj2))+(((66.0841538696525)*r02))+(((-1.0)*r01*sj0*(py*py)))+(((-2.0)*cj0*px*pz*r02))+(((-2.0)*px*py*r00*sj0))+(((-2.0)*cj0*cj2*px*py*r01))+(((17.5661549068115)*r02*sj2))+(((66.0841538696525)*cj2*r02))+(((-2.0)*py*pz*r02*sj0))))*(IKsin(j1))))+(((-2.19943232009835)*cj0*cj2*r00))+(((13.9478878811626)*cj0*pz*r00))+(((-2.19943232009835)*cj0*r00))+(((-2.19943232009835)*cj2*r01*sj0))+(((-13.9478878811626)*cj2*py*r02*sj0))+(((-13.9478878811626)*cj0*px*r02))+(((-5.29881545262155)*pz*r01*sj0*sj2))+(((-1.20638131409835)*r02*sj2))+(((5.29881545262155)*py*r02*sj0*sj2))+(((9.66061545262155)*pz*r02))+(((((((-2.0)*cj0*px*py*r01*sj2))+(((-0.105552)*cj0*pz*r01))+(((-66.0841538696525)*r01*sj0))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.105552)*px*r01*sj2))+(((-0.02403102384)*r00*sj0*sj2))+((cj0*r00*sj2*(pz*pz)))+(((0.45534)*px*r00*sj2))+(((-0.45534)*cj0*px*r02))+((r01*sj0*sj2*(px*px)))+((r01*sj0*sj2*(pz*pz)))+(((0.105552)*pz*r00*sj0))+(((-0.105552)*cj0*cj2*pz*r01))+((cj2*r02*(py*py)))+(((0.45534)*pz*r01*sj0))+(((-2.0)*py*pz*r02*sj0*sj2))+((cj0*r00*sj2*(py*py)))+(((0.105552)*cj2*pz*r00*sj0))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((0.45534)*cj0*pz*r00))+(((0.105552)*cj0*cj2*py*r02))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r02*(px*px)))+(((-20.3796262248202)*r02*sj2))+(((-0.45534)*cj2*py*r02*sj0))+(((-66.0841538696525)*cj0*r00))+(((25.131464939031)*cj2*r02))+(((0.105552)*cj0*py*r02))+(((-17.6698221646115)*r01*sj0*sj2))+(((25.131464939031)*r02))+(((-2.0)*px*py*r00*sj0*sj2))+(((0.45534)*cj2*pz*r01*sj0))+(((0.02403102384)*cj0*r01*sj2))+(((-0.105552)*cj2*px*r02*sj0))+(((-17.6698221646115)*cj0*r00*sj2))+(((0.45534)*cj0*cj2*pz*r00))+(((-0.105552)*px*r02*sj0))+(((-2.0)*cj2*py*pz*r01))+(((0.45534)*py*r01*sj2))+(((-2.0)*px*pz*r00))+(((-66.0841538696525)*cj0*cj2*r00))+(((-66.0841538696525)*cj2*r01*sj0))+(((-0.45534)*py*r02*sj0))+(((-1.0)*cj0*r00*sj2*(px*px)))+(((-2.0)*cj2*px*pz*r00))+(((-0.45534)*cj0*cj2*px*r02))+(((-2.0)*py*pz*r01))+(((0.105552)*py*r00*sj2))+(((-2.0)*cj0*px*pz*r02*sj2))+(((-1.0)*r02*(pz*pz)))+(((0.45534)*pz*r02*sj2))))*(IKcos(j1))))+(((0.509848641127555)*cj0*r01))+(((13.9478878811626)*cj0*cj2*pz*r00))+(((5.29881545262155)*cj0*px*r02*sj2)));
evalcond[1]=((((-10.1570878811626)*cj2*py*r01))+(((3.17551563390428)*r02*sj2))+(((5.29881545262155)*cj0*px*r02))+(((-2.31246419790428)*cj0*r00))+(((0.536050470016236)*cj2*r00*sj0))+(((9.66061545262155)*py*r01*sj2))+(((((((-2.0)*cj0*px*py*r01*sj2))+(((-0.45534)*cj0*pz*r00))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.105552)*px*r01*sj2))+(((-17.5661549068115)*cj2*r02))+(((-0.02403102384)*r00*sj0*sj2))+((cj0*r00*sj2*(pz*pz)))+(((-0.45534)*pz*r01*sj0))+(((25.027797681231)*cj0*r00*sj2))+(((0.45534)*px*r00*sj2))+(((2.0)*px*pz*r00))+((r01*sj0*sj2*(px*px)))+(((-0.105552)*cj0*py*r02))+((r01*sj0*sj2*(pz*pz)))+(((-0.105552)*cj0*cj2*pz*r01))+((cj2*r02*(py*py)))+(((-2.0)*py*pz*r02*sj0*sj2))+((cj0*r00*sj2*(py*py)))+(((0.105552)*cj2*pz*r00*sj0))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((0.105552)*cj0*pz*r01))+(((0.105552)*cj0*cj2*py*r02))+(((0.45534)*py*r02*sj0))+((cj2*r02*(px*px)))+(((20.3796262248202)*cj0*cj2*r00))+(((17.5661549068115)*r02))+(((-0.45534)*cj2*py*r02*sj0))+(((25.027797681231)*r01*sj0*sj2))+(((-2.0)*px*py*r00*sj0*sj2))+(((0.45534)*cj2*pz*r01*sj0))+(((0.02403102384)*cj0*r01*sj2))+(((-0.105552)*cj2*px*r02*sj0))+(((20.3796262248202)*cj2*r01*sj0))+(((0.45534)*cj0*cj2*pz*r00))+(((66.0841538696525)*r02*sj2))+(((-2.0)*cj2*py*pz*r01))+(((0.45534)*py*r01*sj2))+(((0.45534)*cj0*px*r02))+(((-1.0)*cj0*r00*sj2*(px*px)))+(((-2.0)*cj2*px*pz*r00))+(((-0.45534)*cj0*cj2*px*r02))+(((-1.0)*r02*(px*px)))+(((-0.105552)*pz*r00*sj0))+(((2.0)*py*pz*r01))+(((-20.3796262248202)*r01*sj0))+(((0.105552)*py*r00*sj2))+(((-1.0)*r02*(py*py)))+(((-2.0)*cj0*px*pz*r02*sj2))+(((0.105552)*px*r02*sj0))+(((0.45534)*pz*r02*sj2))+((r02*(pz*pz)))+(((-20.3796262248202)*cj0*r00))))*(IKsin(j1))))+(((13.9478878811626)*pz*r01*sj0*sj2))+(((5.29881545262155)*cj0*cj2*pz*r00))+((((((r02*sj2*(py*py)))+(((-66.0841538696525)*r01*sj0*sj2))+(((-0.105552)*px*r02*sj0*sj2))+(((0.02403102384)*cj0*r01))+(((-0.45534)*cj0*px*r02*sj2))+(((-1.0)*r02*sj2*(pz*pz)))+(((-0.45534)*cj2*pz*r02))+((r01*sj0*(pz*pz)))+(((-1.0)*cj2*r01*sj0*(px*px)))+(((2.0)*cj2*px*py*r00*sj0))+(((-0.45534)*py*r02*sj0*sj2))+(((-0.02403102384)*r00*sj0))+((cj0*cj2*r00*(px*px)))+(((-0.45534)*cj2*px*r00))+(((0.45534)*pz*r01*sj0*sj2))+(((2.0)*cj2*py*pz*r02*sj0))+(((0.02403102384)*cj2*r00*sj0))+(((0.45534)*px*r00))+(((-66.0841538696525)*cj0*r00*sj2))+(((-0.105552)*px*r01))+(((0.45534)*pz*r02))+(((-17.6698221646115)*r01*sj0))+(((0.45534)*cj0*pz*r00*sj2))+(((17.6698221646115)*cj0*cj2*r00))+((r01*sj0*(px*px)))+(((2.0)*cj0*cj2*px*pz*r02))+(((0.105552)*py*r00))+(((0.45534)*py*r01))+(((-1.0)*cj0*cj2*r00*(pz*pz)))+(((25.131464939031)*r02*sj2))+(((-20.3796262248202)*r02))+(((-2.0)*px*pz*r00*sj2))+(((-0.02403102384)*cj0*cj2*r01))+(((-2.0)*cj0*px*py*r01))+(((-2.0)*py*pz*r01*sj2))+(((-0.105552)*cj0*pz*r01*sj2))+((r02*sj2*(px*px)))+(((2.0)*cj0*cj2*px*py*r01))+(((-1.0)*cj0*cj2*r00*(py*py)))+((cj0*r00*(py*py)))+(((-1.0)*cj0*r00*(px*px)))+(((17.6698221646115)*cj2*r01*sj0))+((cj0*r00*(pz*pz)))+((cj2*r01*sj0*(py*py)))+(((0.105552)*cj0*py*r02*sj2))+(((0.105552)*pz*r00*sj0*sj2))+(((-0.105552)*cj2*py*r00))+(((-0.45534)*cj2*py*r01))+(((20.3796262248202)*cj2*r02))+(((-17.6698221646115)*cj0*r00))+(((0.105552)*cj2*px*r01))+(((-1.0)*r01*sj0*(py*py)))+(((-2.0)*cj0*px*pz*r02))+(((-2.0)*px*py*r00*sj0))+(((-2.0)*py*pz*r02*sj0))+(((-1.0)*cj2*r01*sj0*(pz*pz)))))*(IKcos(j1))))+(((-5.29881545262155)*cj2*py*r02*sj0))+(((2.31246419790428)*cj0*cj2*r00))+(((-0.509848641127555)*r00*sj0*sj2))+(((-10.1570878811626)*cj2*px*r00))+(((-2.19943232009835)*r01*sj0*sj2))+(((0.536050470016236)*cj0*r01))+(((10.1570878811626)*py*r01))+(((-13.9478878811626)*cj0*px*r02*sj2))+(((-2.31246419790428)*r01*sj0))+(((-5.29881545262155)*pz*r01*sj0))+(((-2.19943232009835)*cj0*r00*sj2))+(((0.509848641127555)*cj0*r01*sj2))+(((5.29881545262155)*py*r02*sj0))+(((1.20638131409835)*cj2*r02))+(((13.9478878811626)*cj0*pz*r00*sj2))+(((10.1570878811626)*pz*r02))+(((-5.29881545262155)*cj0*pz*r00))+(((-1.20638131409835)*r02))+(((2.31246419790428)*cj2*r01*sj0))+(((9.66061545262155)*px*r00*sj2))+(((10.1570878811626)*px*r00))+(((9.66061545262155)*pz*r02*sj2))+(((-0.536050470016236)*r00*sj0))+(((-10.1570878811626)*cj2*pz*r02))+(((-0.536050470016236)*cj0*cj2*r01))+(((-5.29881545262155)*cj0*cj2*px*r02))+(((5.29881545262155)*cj2*pz*r01*sj0))+(((-13.9478878811626)*py*r02*sj0*sj2)));
evalcond[2]=((((((((5.14332627538849)*cj0*r00*sj2))+(((-2.0)*cj0*px*py*r01*sj2))+(((-0.105552)*cj0*pz*r01))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.105552)*px*r01*sj2))+(((-0.02403102384)*r00*sj0*sj2))+((cj0*r00*sj2*(pz*pz)))+(((0.45534)*px*r00*sj2))+(((-0.45534)*cj0*px*r02))+((r01*sj0*sj2*(px*px)))+((r01*sj0*sj2*(pz*pz)))+(((0.105552)*pz*r00*sj0))+(((-0.105552)*cj0*cj2*pz*r01))+((cj2*r02*(py*py)))+(((0.45534)*pz*r01*sj0))+(((-2.0)*py*pz*r02*sj0*sj2))+((cj0*r00*sj2*(py*py)))+(((0.105552)*cj2*pz*r00*sj0))+(((-1.0)*r01*sj0*sj2*(py*py)))+(((0.45534)*cj0*pz*r00))+(((0.105552)*cj0*cj2*py*r02))+((r02*(py*py)))+((cj2*r02*(px*px)))+(((23.5312099703475)*cj2*r01*sj0))+(((5.14332627538849)*r01*sj0*sj2))+((r02*(px*px)))+(((23.5312099703475)*cj0*r00))+(((-0.45534)*cj2*py*r02*sj0))+(((0.105552)*cj0*py*r02))+(((-2.0)*px*py*r00*sj0*sj2))+(((0.45534)*cj2*pz*r01*sj0))+(((0.02403102384)*cj0*r01*sj2))+(((-0.105552)*cj2*px*r02*sj0))+(((23.5312099703475)*r01*sj0))+(((-7.84583474096898)*r02))+(((4.75517009517975)*r02*sj2))+(((0.45534)*cj0*cj2*pz*r00))+(((-0.105552)*px*r02*sj0))+(((-2.0)*cj2*py*pz*r01))+(((0.45534)*py*r01*sj2))+(((-2.0)*px*pz*r00))+(((-7.84583474096898)*cj2*r02))+(((23.5312099703475)*cj0*cj2*r00))+(((-0.45534)*py*r02*sj0))+(((-1.0)*cj0*r00*sj2*(px*px)))+(((-2.0)*cj2*px*pz*r00))+(((-0.45534)*cj0*cj2*px*r02))+(((-2.0)*py*pz*r01))+(((0.105552)*py*r00*sj2))+(((-2.0)*cj0*px*pz*r02*sj2))+(((-1.0)*r02*(pz*pz)))+(((0.45534)*pz*r02*sj2))))*(IKsin(j1))))+(((-8.99411211883743)*pz*r02))+(((5.20331211883743)*cj0*pz*r00*sj2))+(((6.68478454737845)*cj0*cj2*pz*r00))+(((-6.68478454737845)*cj0*cj2*px*r02))+(((0.474673261183764)*r00*sj0))+(((2.04768950609572)*r01*sj0))+(((-8.99411211883743)*px*r00))+(((6.68478454737845)*pz*r01*sj0))+(((5.20331211883743)*pz*r01*sj0*sj2))+(((-6.68478454737845)*cj2*py*r02*sj0))+(((2.04768950609572)*cj2*r01*sj0))+(((-0.474673261183764)*cj0*r01))+(((-0.122597832472445)*r00*sj0*sj2))+(((-0.474673261183764)*cj0*cj2*r01))+(((6.68478454737845)*cj0*pz*r00))+(((-8.99411211883743)*cj2*px*r00))+(((-6.68478454737845)*py*r02*sj0))+(((1.52192489790165)*r02))+(((2.32298454737845)*pz*r02*sj2))+(((0.474673261183764)*cj2*r00*sj0))+(((2.04768950609572)*cj0*cj2*r00))+(((-6.68478454737845)*cj0*px*r02))+(((2.32298454737845)*py*r01*sj2))+(((0.122597832472445)*cj0*r01*sj2))+(((-0.528873891901652)*r01*sj0*sj2))+(((2.04768950609572)*cj0*r00))+(((-5.20331211883743)*cj0*px*r02*sj2))+(((-8.99411211883743)*cj2*py*r01))+(((((((-0.45534)*px*r00))+(((-1.0)*cj0*r00*(py*py)))+((r02*sj2*(py*py)))+(((-1.0)*cj0*r00*(pz*pz)))+(((2.0)*py*pz*r02*sj0))+(((-0.105552)*px*r02*sj0*sj2))+(((-1.0)*r01*sj0*(px*px)))+(((-0.45534)*cj0*px*r02*sj2))+(((-1.0)*r02*sj2*(pz*pz)))+(((-4.75517009517975)*r01*sj0*sj2))+(((0.02403102384)*r00*sj0))+(((-0.45534)*cj2*pz*r02))+(((7.94950199876898)*cj0*r00))+(((-1.0)*cj2*r01*sj0*(px*px)))+(((7.94950199876898)*r01*sj0))+(((-4.75517009517975)*cj0*r00*sj2))+(((2.0)*cj2*px*py*r00*sj0))+(((-0.45534)*py*r02*sj0*sj2))+((cj0*cj2*r00*(px*px)))+(((23.5312099703475)*cj2*r02))+(((-1.0)*r01*sj0*(pz*pz)))+(((-0.45534)*cj2*px*r00))+(((0.45534)*pz*r01*sj0*sj2))+(((2.0)*cj2*py*pz*r02*sj0))+(((0.02403102384)*cj2*r00*sj0))+((cj0*r00*(px*px)))+(((-0.45534)*py*r01))+(((7.94950199876898)*cj2*r01*sj0))+(((-0.45534)*pz*r02))+(((23.5312099703475)*r02))+(((0.45534)*cj0*pz*r00*sj2))+(((2.0)*cj0*cj2*px*pz*r02))+(((-0.105552)*py*r00))+(((-1.0)*cj0*cj2*r00*(pz*pz)))+(((2.0)*px*py*r00*sj0))+(((0.105552)*px*r01))+(((-2.0)*px*pz*r00*sj2))+(((-0.02403102384)*cj0*cj2*r01))+(((-2.0)*py*pz*r01*sj2))+(((-0.105552)*cj0*pz*r01*sj2))+(((2.0)*cj0*px*py*r01))+((r02*sj2*(px*px)))+(((2.0)*cj0*cj2*px*py*r01))+(((-1.0)*cj0*cj2*r00*(py*py)))+(((2.0)*cj0*px*pz*r02))+((cj2*r01*sj0*(py*py)))+(((5.24699353318849)*r02*sj2))+(((-0.02403102384)*cj0*r01))+(((0.105552)*cj0*py*r02*sj2))+(((0.105552)*pz*r00*sj0*sj2))+(((-0.105552)*cj2*py*r00))+(((-0.45534)*cj2*py*r01))+((r01*sj0*(py*py)))+(((7.94950199876898)*cj0*cj2*r00))+(((0.105552)*cj2*px*r01))+(((-1.0)*cj2*r01*sj0*(pz*pz)))))*(IKcos(j1))))+(((2.32298454737845)*px*r00*sj2))+(((1.52192489790165)*cj2*r02))+(((-8.99411211883743)*py*r01))+(((-0.528873891901652)*cj0*r00*sj2))+(((-8.99411211883743)*cj2*pz*r02))+(((6.68478454737845)*cj2*pz*r01*sj0))+(((-5.20331211883743)*py*r02*sj0*sj2))+(((1.18463807009572)*r02*sj2)));
evalcond[3]=((((-2.32298454737845)*cj2*px*r00))+(((-0.474673261183764)*cj0*r01*sj2))+(((-5.20331211883743)*py*r02*sj0))+(((-5.20331211883743)*cj2*pz*r01*sj0))+(((-8.99411211883743)*pz*r02*sj2))+(((-6.68478454737845)*py*r02*sj0*sj2))+(((0.474673261183764)*r00*sj0*sj2))+(((-8.99411211883743)*px*r00*sj2))+(((2.32298454737845)*pz*r02))+(((2.04768950609572)*r01*sj0*sj2))+(((-0.122597832472445)*cj0*cj2*r01))+(((-0.528873891901652)*r01*sj0))+(((5.20331211883743)*pz*r01*sj0))+(((-1.18463807009572)*cj2*r02))+(((0.528873891901652)*cj0*cj2*r00))+(((2.32298454737845)*py*r01))+(((-0.122597832472445)*r00*sj0))+(((((((4.75517009517975)*r02))+((r02*sj2*(py*py)))+(((-4.75517009517975)*cj2*r02))+(((-0.105552)*px*r02*sj0*sj2))+(((0.02403102384)*cj0*r01))+(((-0.45534)*cj0*px*r02*sj2))+(((-1.0)*r02*sj2*(pz*pz)))+(((-0.45534)*cj2*pz*r02))+((r01*sj0*(pz*pz)))+(((-7.84583474096898)*r02*sj2))+(((-5.14332627538849)*cj0*cj2*r00))+(((-1.0)*cj2*r01*sj0*(px*px)))+(((2.0)*cj2*px*py*r00*sj0))+(((-0.45534)*py*r02*sj0*sj2))+(((-0.02403102384)*r00*sj0))+(((5.14332627538849)*r01*sj0))+((cj0*cj2*r00*(px*px)))+(((-0.45534)*cj2*px*r00))+(((0.45534)*pz*r01*sj0*sj2))+(((2.0)*cj2*py*pz*r02*sj0))+(((0.02403102384)*cj2*r00*sj0))+(((0.45534)*px*r00))+(((23.5312099703475)*r01*sj0*sj2))+(((-5.14332627538849)*cj2*r01*sj0))+(((23.5312099703475)*cj0*r00*sj2))+(((-0.105552)*px*r01))+(((0.45534)*pz*r02))+(((0.45534)*cj0*pz*r00*sj2))+((r01*sj0*(px*px)))+(((2.0)*cj0*cj2*px*pz*r02))+(((0.105552)*py*r00))+(((0.45534)*py*r01))+(((-1.0)*cj0*cj2*r00*(pz*pz)))+(((-2.0)*px*pz*r00*sj2))+(((-0.02403102384)*cj0*cj2*r01))+(((5.14332627538849)*cj0*r00))+(((-2.0)*cj0*px*py*r01))+(((-2.0)*py*pz*r01*sj2))+(((-0.105552)*cj0*pz*r01*sj2))+((r02*sj2*(px*px)))+(((2.0)*cj0*cj2*px*py*r01))+(((-1.0)*cj0*cj2*r00*(py*py)))+((cj0*r00*(py*py)))+(((-1.0)*cj0*r00*(px*px)))+((cj0*r00*(pz*pz)))+((cj2*r01*sj0*(py*py)))+(((0.105552)*cj0*py*r02*sj2))+(((0.105552)*pz*r00*sj0*sj2))+(((-0.105552)*cj2*py*r00))+(((-0.45534)*cj2*py*r01))+(((0.105552)*cj2*px*r01))+(((-1.0)*r01*sj0*(py*py)))+(((-2.0)*cj0*px*pz*r02))+(((-2.0)*px*py*r00*sj0))+(((-2.0)*py*pz*r02*sj0))+(((-1.0)*cj2*r01*sj0*(pz*pz)))))*(IKsin(j1))))+(((-5.20331211883743)*cj0*px*r02))+(((6.68478454737845)*pz*r01*sj0*sj2))+(((((((-0.105552)*cj0*cj2*py*r02))+(((-0.45534)*py*r01*sj2))+(((-0.105552)*cj0*pz*r01))+((r01*sj0*sj2*(py*py)))+(((-0.02403102384)*cj0*r01*sj2))+(((0.45534)*cj2*py*r02*sj0))+(((-0.45534)*cj0*px*r02))+(((-1.0)*cj2*r02*(px*px)))+(((4.75517009517975)*cj0*cj2*r00))+(((0.105552)*pz*r00*sj0))+(((0.45534)*pz*r01*sj0))+(((0.02403102384)*r00*sj0*sj2))+(((0.45534)*cj0*pz*r00))+((r02*(py*py)))+(((7.94950199876898)*cj0*r00*sj2))+((cj2*r02*(pz*pz)))+(((2.0)*px*py*r00*sj0*sj2))+(((-4.75517009517975)*cj0*r00))+(((0.105552)*cj0*cj2*pz*r01))+(((5.24699353318849)*r02))+(((-1.0)*r01*sj0*sj2*(px*px)))+(((23.5312099703475)*r02*sj2))+((r02*(px*px)))+(((2.0)*cj2*px*pz*r00))+(((-5.24699353318849)*cj2*r02))+(((0.105552)*cj0*py*r02))+(((-4.75517009517975)*r01*sj0))+(((2.0)*py*pz*r02*sj0*sj2))+(((0.45534)*cj0*cj2*px*r02))+(((-0.45534)*cj2*pz*r01*sj0))+(((-0.105552)*cj2*pz*r00*sj0))+(((-0.45534)*cj0*cj2*pz*r00))+(((2.0)*cj2*py*pz*r01))+(((-1.0)*cj0*r00*sj2*(pz*pz)))+(((-0.105552)*px*r02*sj0))+(((-1.0)*cj2*r02*(py*py)))+(((-0.105552)*py*r00*sj2))+(((0.105552)*cj2*px*r02*sj0))+(((-2.0)*px*pz*r00))+(((7.94950199876898)*r01*sj0*sj2))+((cj0*r00*sj2*(px*px)))+(((0.105552)*px*r01*sj2))+(((2.0)*cj0*px*pz*r02*sj2))+(((2.0)*cj0*px*py*r01*sj2))+(((-0.45534)*py*r02*sj0))+(((4.75517009517975)*cj2*r01*sj0))+(((-2.0)*py*pz*r01))+(((-0.45534)*pz*r02*sj2))+(((-0.45534)*px*r00*sj2))+(((-1.0)*r02*(pz*pz)))+(((-1.0)*cj0*r00*sj2*(py*py)))+(((-1.0)*r01*sj0*sj2*(pz*pz)))))*(IKcos(j1))))+(((6.68478454737845)*cj0*pz*r00*sj2))+(((-6.68478454737845)*cj0*px*r02*sj2))+(((-0.528873891901652)*cj0*r00))+(((5.20331211883743)*cj0*pz*r00))+(((0.122597832472445)*cj0*r01))+(((0.122597832472445)*cj2*r00*sj0))+(((-2.32298454737845)*cj2*py*r01))+(((-5.20331211883743)*cj0*cj2*pz*r00))+(((0.528873891901652)*cj2*r01*sj0))+(((1.52192489790165)*r02*sj2))+(((1.18463807009572)*r02))+(((5.20331211883743)*cj0*cj2*px*r02))+(((5.20331211883743)*cj2*py*r02*sj0))+(((-8.99411211883743)*py*r01*sj2))+(((-2.32298454737845)*cj2*pz*r02))+(((2.32298454737845)*px*r00))+(((2.04768950609572)*cj0*r00*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x230=((0.813008130081301)*cj2);
IkReal x231=(py*sj0);
IkReal x232=(cj0*px);
IkReal x233=((0.18509756097561)*sj1);
IkReal x234=((0.18509756097561)*cj1);
IkReal x235=((0.813008130081301)*cj1*sj2);
IkReal x236=((0.813008130081301)*sj1*sj2);
if( IKabs(((-1.5409756097561)+((cj1*x230*x231))+((cj1*x230*x232))+((sj2*x233))+(((-3.89252032520325)*cj2))+(((2.43569105691057)*sj2))+(((-1.0)*pz*x235))+(((-1.0)*pz*sj1*x230))+(((-1.0)*x231*x236))+(((-1.0)*cj2*x234))+(((-1.0)*x232*x236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.77308943089431)+(((-2.43569105691057)*cj2))+(((-1.0)*pz*x236))+((x232*x235))+(((-3.89252032520325)*sj2))+(((-1.0)*sj2*x234))+(((-1.0)*cj2*x233))+((sj1*x230*x231))+((sj1*x230*x232))+((x231*x235))+((cj1*pz*x230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.5409756097561)+((cj1*x230*x231))+((cj1*x230*x232))+((sj2*x233))+(((-3.89252032520325)*cj2))+(((2.43569105691057)*sj2))+(((-1.0)*pz*x235))+(((-1.0)*pz*sj1*x230))+(((-1.0)*x231*x236))+(((-1.0)*cj2*x234))+(((-1.0)*x232*x236))))+IKsqr(((-1.77308943089431)+(((-2.43569105691057)*cj2))+(((-1.0)*pz*x236))+((x232*x235))+(((-3.89252032520325)*sj2))+(((-1.0)*sj2*x234))+(((-1.0)*cj2*x233))+((sj1*x230*x231))+((sj1*x230*x232))+((x231*x235))+((cj1*pz*x230))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.5409756097561)+((cj1*x230*x231))+((cj1*x230*x232))+((sj2*x233))+(((-3.89252032520325)*cj2))+(((2.43569105691057)*sj2))+(((-1.0)*pz*x235))+(((-1.0)*pz*sj1*x230))+(((-1.0)*x231*x236))+(((-1.0)*cj2*x234))+(((-1.0)*x232*x236))), ((-1.77308943089431)+(((-2.43569105691057)*cj2))+(((-1.0)*pz*x236))+((x232*x235))+(((-3.89252032520325)*sj2))+(((-1.0)*sj2*x234))+(((-1.0)*cj2*x233))+((sj1*x230*x231))+((sj1*x230*x232))+((x231*x235))+((cj1*pz*x230))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x237=IKcos(j3);
IkReal x238=IKsin(j3);
IkReal x239=((1.0)*sj1);
IkReal x240=(r01*sj0);
IkReal x241=((1.23)*sj2);
IkReal x242=((1.0)*cj1);
IkReal x243=((0.642790725366564)*sj2);
IkReal x244=(cj0*cj1);
IkReal x245=((0.766041828742221)*cj4);
IkReal x246=(py*sj0);
IkReal x247=(cj2*x238);
IkReal x248=(cj4*x237);
evalcond[0]=((-4.7878)+(((-1.23)*x247))+((px*x244))+(((-1.0)*pz*x239))+(((-1.0)*x237*x241))+((cj1*x246))+(((-2.1809)*sj2))+(((-0.22767)*cj1))+(((-1.8954)*cj2)));
evalcond[1]=((2.9959)+(((-1.0)*pz*x242))+(((2.1809)*cj2))+(((0.22767)*sj1))+(((-1.8954)*sj2))+(((-1.0)*x238*x241))+(((1.23)*cj2*x237))+(((-1.0)*cj0*px*x239))+(((-1.0)*x239*x246)));
evalcond[2]=((((-1.0)*r02*x239))+((cj1*x240))+(((-1.0)*x243*x248))+(((-1.0)*cj2*x237*x245))+((sj2*x238*x245))+((r00*x244))+(((-0.642790725366564)*cj4*x247)));
evalcond[3]=((((-1.0)*cj4*x238*x243))+(((-1.0)*sj2*x237*x245))+(((-1.0)*cj0*r00*x239))+(((-1.0)*r02*x242))+(((-1.0)*x245*x247))+(((0.642790725366564)*cj2*x248))+(((-1.0)*x239*x240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "01005bede298d3d422427fa460687801"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
